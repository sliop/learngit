git config --global user.name "Your name" 
git config --global user.email "email@example.com"
git add <file> 													#添加文件到仓库
git commit -m <message> 										#提交文件到仓库
mkdir <file>  			 									    #新建文件夹
cd <file name">													#进入文件夹
git init														#创建git仓库
git status														#查看仓库当前状态
git diff <file>													#查看文件变化
git log															#显示从最近到最远的提交日志
git log --pretty=oneline										#用一行来显示从最近到最远的提交日志
git reset --hard <版本号>										#会退到指定版本，版本号可以是Commit ID，也可以用"HEAD"表示当前版本，"HEAD^"表示上一版本，"HEAD^^"表示上两个版本,"HEAD~N"表示上N个版本
git reflog														#查看命令历史
git checkout -- <file>											#丢弃工作区的修改
git reset HEAD <file>											#丢弃暂存区的修改，工作区的修改仍然不变，还需上一步命令来丢弃工作区修改
git rm <file>													#用于删除文件
git ssh-keyge -t rsa -C "email@example.com"						#创建SSH Key
git remote add origin git@server-name:path/repo-name.git		#关联远程库
git remote add origin https://server-name/path/repo-name.git	#关联远程库
#Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
git push -u origin master										#第一次推送master分支的所有内容并将远程与本地分支关联
git push origin master											#推送master分支的修改
git clone git@server-name:path/repo-name.git					#克隆远程库
git branch														#查看分支
git branch <name>												#创建分支
git checkout <name>												#切换分支
git checkout -b <name>											#创建并切换分支
git merge <name>												#合并某分支到当前分支
git branch -d <name>											#删除分支
git log --graph --pretty=oneline --abbrev-commit				#可以查看分支合并图
git merge --no-ff -m 'message' <name>							#用普通模式合并分支，合并后的历史有分支
git stash														#暂时储存工作现场
git stash pop													#回到工作现场并删除stashneirong
git stash apply stash@{N}										#恢复到指定的stash N
git stash list													#查看stash内容
git stash drop     												#删除stash内容
git branch -D <name>											#强行删除一个没有被合并过的分支
git remote -v													#查看远程库信息
git push origin <name>											#从本地推送分支
git pull														#抓取远程的新提交
git checkout -b <name> origin/<name>							#在本地创建和远程分支对应的分支,本地和远程分支的名字最好一致
git branch --set-upstream <name> origin/<name>					#建立本地分支与远程分支的关联